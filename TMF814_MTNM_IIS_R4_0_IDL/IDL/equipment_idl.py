# Python stubs generated by omniidl from equipment.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "globaldefs.idl"
import globaldefs_idl
_0_globaldefs = omniORB.openModule("globaldefs")
_0_globaldefs__POA = omniORB.openModule("globaldefs__POA")

# #include "common.idl"
import common_idl
_0_common = omniORB.openModule("common")
_0_common__POA = omniORB.openModule("common__POA")

# #include "transmissionParameters.idl"
import transmissionParameters_idl
_0_transmissionParameters = omniORB.openModule("transmissionParameters")
_0_transmissionParameters__POA = omniORB.openModule("transmissionParameters__POA")

# #include "terminationPoint.idl"
import terminationPoint_idl
_0_terminationPoint = omniORB.openModule("terminationPoint")
_0_terminationPoint__POA = omniORB.openModule("terminationPoint__POA")

#
# Start of module "equipment"
#
__name__ = "equipment"
_0_equipment = omniORB.openModule("equipment", r"equipment.idl")
_0_equipment__POA = omniORB.openModule("equipment__POA", r"equipment.idl")


# typedef ... EquipmentObjectType_T
class EquipmentObjectType_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_equipment.EquipmentObjectType_T = EquipmentObjectType_T
_0_equipment._d_EquipmentObjectType_T  = (omniORB.tcInternal.tv_string,0)
_0_equipment._ad_EquipmentObjectType_T = (omniORB.tcInternal.tv_alias, EquipmentObjectType_T._NP_RepositoryId, "EquipmentObjectType_T", (omniORB.tcInternal.tv_string,0))
_0_equipment._tc_EquipmentObjectType_T = omniORB.tcInternal.createTypeCode(_0_equipment._ad_EquipmentObjectType_T)
omniORB.registerType(EquipmentObjectType_T._NP_RepositoryId, _0_equipment._ad_EquipmentObjectType_T, _0_equipment._tc_EquipmentObjectType_T)
del EquipmentObjectType_T

# typedef ... EquipmentObjectTypeList_T
class EquipmentObjectTypeList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentObjectTypeList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_equipment.EquipmentObjectTypeList_T = EquipmentObjectTypeList_T
_0_equipment._d_EquipmentObjectTypeList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"], 0)
_0_equipment._ad_EquipmentObjectTypeList_T = (omniORB.tcInternal.tv_alias, EquipmentObjectTypeList_T._NP_RepositoryId, "EquipmentObjectTypeList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"], 0))
_0_equipment._tc_EquipmentObjectTypeList_T = omniORB.tcInternal.createTypeCode(_0_equipment._ad_EquipmentObjectTypeList_T)
omniORB.registerType(EquipmentObjectTypeList_T._NP_RepositoryId, _0_equipment._ad_EquipmentObjectTypeList_T, _0_equipment._tc_EquipmentObjectTypeList_T)
del EquipmentObjectTypeList_T

# enum ServiceState_T
_0_equipment.IN_SERVICE = omniORB.EnumItem("IN_SERVICE", 0)
_0_equipment.OUT_OF_SERVICE = omniORB.EnumItem("OUT_OF_SERVICE", 1)
_0_equipment.OUT_OF_SERVICE_BY_MAINTENANCE = omniORB.EnumItem("OUT_OF_SERVICE_BY_MAINTENANCE", 2)
_0_equipment.SERV_NA = omniORB.EnumItem("SERV_NA", 3)
_0_equipment.ServiceState_T = omniORB.Enum("IDL:mtnm.tmforum.org/equipment/ServiceState_T:1.0", (_0_equipment.IN_SERVICE, _0_equipment.OUT_OF_SERVICE, _0_equipment.OUT_OF_SERVICE_BY_MAINTENANCE, _0_equipment.SERV_NA,))

_0_equipment._d_ServiceState_T  = (omniORB.tcInternal.tv_enum, _0_equipment.ServiceState_T._NP_RepositoryId, "ServiceState_T", _0_equipment.ServiceState_T._items)
_0_equipment._tc_ServiceState_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_ServiceState_T)
omniORB.registerType(_0_equipment.ServiceState_T._NP_RepositoryId, _0_equipment._d_ServiceState_T, _0_equipment._tc_ServiceState_T)

# typedef ... EquipmentHolderType_T
class EquipmentHolderType_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentHolderType_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_equipment.EquipmentHolderType_T = EquipmentHolderType_T
_0_equipment._d_EquipmentHolderType_T  = (omniORB.tcInternal.tv_string,0)
_0_equipment._ad_EquipmentHolderType_T = (omniORB.tcInternal.tv_alias, EquipmentHolderType_T._NP_RepositoryId, "EquipmentHolderType_T", (omniORB.tcInternal.tv_string,0))
_0_equipment._tc_EquipmentHolderType_T = omniORB.tcInternal.createTypeCode(_0_equipment._ad_EquipmentHolderType_T)
omniORB.registerType(EquipmentHolderType_T._NP_RepositoryId, _0_equipment._ad_EquipmentHolderType_T, _0_equipment._tc_EquipmentHolderType_T)
del EquipmentHolderType_T

# enum HolderState_T
_0_equipment.EMPTY = omniORB.EnumItem("EMPTY", 0)
_0_equipment.INSTALLED_AND_EXPECTED = omniORB.EnumItem("INSTALLED_AND_EXPECTED", 1)
_0_equipment.EXPECTED_AND_NOT_INSTALLED = omniORB.EnumItem("EXPECTED_AND_NOT_INSTALLED", 2)
_0_equipment.INSTALLED_AND_NOT_EXPECTED = omniORB.EnumItem("INSTALLED_AND_NOT_EXPECTED", 3)
_0_equipment.MISMATCH_OF_INSTALLED_AND_EXPECTED = omniORB.EnumItem("MISMATCH_OF_INSTALLED_AND_EXPECTED", 4)
_0_equipment.UNAVAILABLE = omniORB.EnumItem("UNAVAILABLE", 5)
_0_equipment.UNKNOWN = omniORB.EnumItem("UNKNOWN", 6)
_0_equipment.HolderState_T = omniORB.Enum("IDL:mtnm.tmforum.org/equipment/HolderState_T:1.0", (_0_equipment.EMPTY, _0_equipment.INSTALLED_AND_EXPECTED, _0_equipment.EXPECTED_AND_NOT_INSTALLED, _0_equipment.INSTALLED_AND_NOT_EXPECTED, _0_equipment.MISMATCH_OF_INSTALLED_AND_EXPECTED, _0_equipment.UNAVAILABLE, _0_equipment.UNKNOWN,))

_0_equipment._d_HolderState_T  = (omniORB.tcInternal.tv_enum, _0_equipment.HolderState_T._NP_RepositoryId, "HolderState_T", _0_equipment.HolderState_T._items)
_0_equipment._tc_HolderState_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_HolderState_T)
omniORB.registerType(_0_equipment.HolderState_T._NP_RepositoryId, _0_equipment._d_HolderState_T, _0_equipment._tc_HolderState_T)

# struct Equipment_T
_0_equipment.Equipment_T = omniORB.newEmptyClass()
class Equipment_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/Equipment_T:1.0"

    def __init__(self, name, userLabel, nativeEMSName, owner, alarmReportingIndicator, serviceState, expectedEquipmentObjectType, installedEquipmentObjectType, installedPartNumber, installedVersion, installedSerialNumber, additionalInfo):
        self.name = name
        self.userLabel = userLabel
        self.nativeEMSName = nativeEMSName
        self.owner = owner
        self.alarmReportingIndicator = alarmReportingIndicator
        self.serviceState = serviceState
        self.expectedEquipmentObjectType = expectedEquipmentObjectType
        self.installedEquipmentObjectType = installedEquipmentObjectType
        self.installedPartNumber = installedPartNumber
        self.installedVersion = installedVersion
        self.installedSerialNumber = installedSerialNumber
        self.additionalInfo = additionalInfo

_0_equipment.Equipment_T = Equipment_T
_0_equipment._d_Equipment_T  = (omniORB.tcInternal.tv_struct, Equipment_T, Equipment_T._NP_RepositoryId, "Equipment_T", "name", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "userLabel", (omniORB.tcInternal.tv_string,0), "nativeEMSName", (omniORB.tcInternal.tv_string,0), "owner", (omniORB.tcInternal.tv_string,0), "alarmReportingIndicator", omniORB.tcInternal.tv_boolean, "serviceState", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/ServiceState_T:1.0"], "expectedEquipmentObjectType", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"], "installedEquipmentObjectType", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"], "installedPartNumber", (omniORB.tcInternal.tv_string,0), "installedVersion", (omniORB.tcInternal.tv_string,0), "installedSerialNumber", (omniORB.tcInternal.tv_string,0), "additionalInfo", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NVSList_T:1.0"])
_0_equipment._tc_Equipment_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_Equipment_T)
omniORB.registerType(Equipment_T._NP_RepositoryId, _0_equipment._d_Equipment_T, _0_equipment._tc_Equipment_T)
del Equipment_T

# struct EQTCreateData_T
_0_equipment.EQTCreateData_T = omniORB.newEmptyClass()
class EQTCreateData_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EQTCreateData_T:1.0"

    def __init__(self, userLabel, forceUniqueness, owner, expectedEquipmentObjectType, equipmentHolderName, additionalInfo):
        self.userLabel = userLabel
        self.forceUniqueness = forceUniqueness
        self.owner = owner
        self.expectedEquipmentObjectType = expectedEquipmentObjectType
        self.equipmentHolderName = equipmentHolderName
        self.additionalInfo = additionalInfo

_0_equipment.EQTCreateData_T = EQTCreateData_T
_0_equipment._d_EQTCreateData_T  = (omniORB.tcInternal.tv_struct, EQTCreateData_T, EQTCreateData_T._NP_RepositoryId, "EQTCreateData_T", "userLabel", (omniORB.tcInternal.tv_string,0), "forceUniqueness", omniORB.tcInternal.tv_boolean, "owner", (omniORB.tcInternal.tv_string,0), "expectedEquipmentObjectType", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectType_T:1.0"], "equipmentHolderName", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "additionalInfo", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NVSList_T:1.0"])
_0_equipment._tc_EQTCreateData_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_EQTCreateData_T)
omniORB.registerType(EQTCreateData_T._NP_RepositoryId, _0_equipment._d_EQTCreateData_T, _0_equipment._tc_EQTCreateData_T)
del EQTCreateData_T

# struct EquipmentHolder_T
_0_equipment.EquipmentHolder_T = omniORB.newEmptyClass()
class EquipmentHolder_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentHolder_T:1.0"

    def __init__(self, name, userLabel, nativeEMSName, owner, alarmReportingIndicator, holderType, expectedOrInstalledEquipment, acceptableEquipmentTypeList, holderState, additionalInfo):
        self.name = name
        self.userLabel = userLabel
        self.nativeEMSName = nativeEMSName
        self.owner = owner
        self.alarmReportingIndicator = alarmReportingIndicator
        self.holderType = holderType
        self.expectedOrInstalledEquipment = expectedOrInstalledEquipment
        self.acceptableEquipmentTypeList = acceptableEquipmentTypeList
        self.holderState = holderState
        self.additionalInfo = additionalInfo

_0_equipment.EquipmentHolder_T = EquipmentHolder_T
_0_equipment._d_EquipmentHolder_T  = (omniORB.tcInternal.tv_struct, EquipmentHolder_T, EquipmentHolder_T._NP_RepositoryId, "EquipmentHolder_T", "name", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "userLabel", (omniORB.tcInternal.tv_string,0), "nativeEMSName", (omniORB.tcInternal.tv_string,0), "owner", (omniORB.tcInternal.tv_string,0), "alarmReportingIndicator", omniORB.tcInternal.tv_boolean, "holderType", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentHolderType_T:1.0"], "expectedOrInstalledEquipment", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "acceptableEquipmentTypeList", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentObjectTypeList_T:1.0"], "holderState", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/HolderState_T:1.0"], "additionalInfo", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NVSList_T:1.0"])
_0_equipment._tc_EquipmentHolder_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_EquipmentHolder_T)
omniORB.registerType(EquipmentHolder_T._NP_RepositoryId, _0_equipment._d_EquipmentHolder_T, _0_equipment._tc_EquipmentHolder_T)
del EquipmentHolder_T

# enum EquipmentTypeQualifier_T
_0_equipment.EQT = omniORB.EnumItem("EQT", 0)
_0_equipment.EQT_HOLDER = omniORB.EnumItem("EQT_HOLDER", 1)
_0_equipment.EquipmentTypeQualifier_T = omniORB.Enum("IDL:mtnm.tmforum.org/equipment/EquipmentTypeQualifier_T:1.0", (_0_equipment.EQT, _0_equipment.EQT_HOLDER,))

_0_equipment._d_EquipmentTypeQualifier_T  = (omniORB.tcInternal.tv_enum, _0_equipment.EquipmentTypeQualifier_T._NP_RepositoryId, "EquipmentTypeQualifier_T", _0_equipment.EquipmentTypeQualifier_T._items)
_0_equipment._tc_EquipmentTypeQualifier_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_EquipmentTypeQualifier_T)
omniORB.registerType(_0_equipment.EquipmentTypeQualifier_T._NP_RepositoryId, _0_equipment._d_EquipmentTypeQualifier_T, _0_equipment._tc_EquipmentTypeQualifier_T)

# union EquipmentOrHolder_T
_0_equipment.EquipmentOrHolder_T = omniORB.newEmptyClass()
class EquipmentOrHolder_T (omniORB.Union):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentOrHolder_T:1.0"

_0_equipment.EquipmentOrHolder_T = EquipmentOrHolder_T

EquipmentOrHolder_T._m_to_d = {"equip": _0_equipment.EQT, "holder": _0_equipment.EQT_HOLDER}
EquipmentOrHolder_T._d_to_m = {_0_equipment.EQT: "equip", _0_equipment.EQT_HOLDER: "holder"}
EquipmentOrHolder_T._def_m  = None
EquipmentOrHolder_T._def_d  = None

_0_equipment._m_EquipmentOrHolder_T  = ((_0_equipment.EQT, "equip", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/Equipment_T:1.0"]), (_0_equipment.EQT_HOLDER, "holder", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentHolder_T:1.0"]),)
_0_equipment._d_EquipmentOrHolder_T  = (omniORB.tcInternal.tv_union, EquipmentOrHolder_T, EquipmentOrHolder_T._NP_RepositoryId, "EquipmentOrHolder_T", omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentTypeQualifier_T:1.0"], -1, _0_equipment._m_EquipmentOrHolder_T, None, {_0_equipment.EQT: _0_equipment._m_EquipmentOrHolder_T[0], _0_equipment.EQT_HOLDER: _0_equipment._m_EquipmentOrHolder_T[1]})
_0_equipment._tc_EquipmentOrHolder_T = omniORB.tcInternal.createTypeCode(_0_equipment._d_EquipmentOrHolder_T)
omniORB.registerType(EquipmentOrHolder_T._NP_RepositoryId, _0_equipment._d_EquipmentOrHolder_T, _0_equipment._tc_EquipmentOrHolder_T)
del EquipmentOrHolder_T

# typedef ... EquipmentOrHolderList_T
class EquipmentOrHolderList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_equipment.EquipmentOrHolderList_T = EquipmentOrHolderList_T
_0_equipment._d_EquipmentOrHolderList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolder_T:1.0"], 0)
_0_equipment._ad_EquipmentOrHolderList_T = (omniORB.tcInternal.tv_alias, EquipmentOrHolderList_T._NP_RepositoryId, "EquipmentOrHolderList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolder_T:1.0"], 0))
_0_equipment._tc_EquipmentOrHolderList_T = omniORB.tcInternal.createTypeCode(_0_equipment._ad_EquipmentOrHolderList_T)
omniORB.registerType(EquipmentOrHolderList_T._NP_RepositoryId, _0_equipment._ad_EquipmentOrHolderList_T, _0_equipment._tc_EquipmentOrHolderList_T)
del EquipmentOrHolderList_T

# interface EquipmentOrHolderIterator_I
_0_equipment._d_EquipmentOrHolderIterator_I = (omniORB.tcInternal.tv_objref, "IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderIterator_I:1.0", "EquipmentOrHolderIterator_I")
omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderIterator_I:1.0"] = _0_equipment._d_EquipmentOrHolderIterator_I
_0_equipment.EquipmentOrHolderIterator_I = omniORB.newEmptyClass()
class EquipmentOrHolderIterator_I :
    _NP_RepositoryId = _0_equipment._d_EquipmentOrHolderIterator_I[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_equipment.EquipmentOrHolderIterator_I = EquipmentOrHolderIterator_I
_0_equipment._tc_EquipmentOrHolderIterator_I = omniORB.tcInternal.createTypeCode(_0_equipment._d_EquipmentOrHolderIterator_I)
omniORB.registerType(EquipmentOrHolderIterator_I._NP_RepositoryId, _0_equipment._d_EquipmentOrHolderIterator_I, _0_equipment._tc_EquipmentOrHolderIterator_I)

# EquipmentOrHolderIterator_I operations and attributes
EquipmentOrHolderIterator_I._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentOrHolderIterator_I._d_getLength = ((), (omniORB.tcInternal.tv_ulong, ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentOrHolderIterator_I._d_destroy = ((), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})

# EquipmentOrHolderIterator_I object reference
class _objref_EquipmentOrHolderIterator_I (CORBA.Object):
    _NP_RepositoryId = EquipmentOrHolderIterator_I._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def next_n(self, *args):
        return self._obj.invoke("next_n", _0_equipment.EquipmentOrHolderIterator_I._d_next_n, args)

    def getLength(self, *args):
        return self._obj.invoke("getLength", _0_equipment.EquipmentOrHolderIterator_I._d_getLength, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_equipment.EquipmentOrHolderIterator_I._d_destroy, args)

omniORB.registerObjref(EquipmentOrHolderIterator_I._NP_RepositoryId, _objref_EquipmentOrHolderIterator_I)
_0_equipment._objref_EquipmentOrHolderIterator_I = _objref_EquipmentOrHolderIterator_I
del EquipmentOrHolderIterator_I, _objref_EquipmentOrHolderIterator_I

# EquipmentOrHolderIterator_I skeleton
__name__ = "equipment__POA"
class EquipmentOrHolderIterator_I (PortableServer.Servant):
    _NP_RepositoryId = _0_equipment.EquipmentOrHolderIterator_I._NP_RepositoryId


    _omni_op_d = {"next_n": _0_equipment.EquipmentOrHolderIterator_I._d_next_n, "getLength": _0_equipment.EquipmentOrHolderIterator_I._d_getLength, "destroy": _0_equipment.EquipmentOrHolderIterator_I._d_destroy}

EquipmentOrHolderIterator_I._omni_skeleton = EquipmentOrHolderIterator_I
_0_equipment__POA.EquipmentOrHolderIterator_I = EquipmentOrHolderIterator_I
omniORB.registerSkeleton(EquipmentOrHolderIterator_I._NP_RepositoryId, EquipmentOrHolderIterator_I)
del EquipmentOrHolderIterator_I
__name__ = "equipment"

# interface EquipmentInventoryMgr_I
_0_equipment._d_EquipmentInventoryMgr_I = (omniORB.tcInternal.tv_objref, "IDL:mtnm.tmforum.org/equipment/EquipmentInventoryMgr_I:1.0", "EquipmentInventoryMgr_I")
omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentInventoryMgr_I:1.0"] = _0_equipment._d_EquipmentInventoryMgr_I
_0_equipment.EquipmentInventoryMgr_I = omniORB.newEmptyClass()
class EquipmentInventoryMgr_I (_0_common.Common_I):
    _NP_RepositoryId = _0_equipment._d_EquipmentInventoryMgr_I[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_equipment.EquipmentInventoryMgr_I = EquipmentInventoryMgr_I
_0_equipment._tc_EquipmentInventoryMgr_I = omniORB.tcInternal.createTypeCode(_0_equipment._d_EquipmentInventoryMgr_I)
omniORB.registerType(EquipmentInventoryMgr_I._NP_RepositoryId, _0_equipment._d_EquipmentInventoryMgr_I, _0_equipment._tc_EquipmentInventoryMgr_I)

# EquipmentInventoryMgr_I operations and attributes
EquipmentInventoryMgr_I._d_provisionEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EQTCreateData_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/Equipment_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_unprovisionEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_setAlarmReportingOn = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_setAlarmReportingOff = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getContainedEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolder_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderIterator_I:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllEquipmentNames = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesList_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesIterator_I:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllSupportedPTPs = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:mtnm.tmforum.org/terminationPoint/TerminationPointList_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/terminationPoint/TerminationPointIterator_I:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllSupportedPTPNames = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesList_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesIterator_I:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllSupportingEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getAllSupportingEquipmentNames = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getSupportingEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getSupportingEquipmentNames = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getSupportedEquipment = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/equipment/EquipmentOrHolderList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
EquipmentInventoryMgr_I._d_getSupportedEquipmentNames = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributesList_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})

# EquipmentInventoryMgr_I object reference
class _objref_EquipmentInventoryMgr_I (_0_common._objref_Common_I):
    _NP_RepositoryId = EquipmentInventoryMgr_I._NP_RepositoryId

    def __init__(self, obj):
        _0_common._objref_Common_I.__init__(self, obj)

    def provisionEquipment(self, *args):
        return self._obj.invoke("provisionEquipment", _0_equipment.EquipmentInventoryMgr_I._d_provisionEquipment, args)

    def unprovisionEquipment(self, *args):
        return self._obj.invoke("unprovisionEquipment", _0_equipment.EquipmentInventoryMgr_I._d_unprovisionEquipment, args)

    def setAlarmReportingOn(self, *args):
        return self._obj.invoke("setAlarmReportingOn", _0_equipment.EquipmentInventoryMgr_I._d_setAlarmReportingOn, args)

    def setAlarmReportingOff(self, *args):
        return self._obj.invoke("setAlarmReportingOff", _0_equipment.EquipmentInventoryMgr_I._d_setAlarmReportingOff, args)

    def getContainedEquipment(self, *args):
        return self._obj.invoke("getContainedEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getContainedEquipment, args)

    def getEquipment(self, *args):
        return self._obj.invoke("getEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getEquipment, args)

    def getAllEquipment(self, *args):
        return self._obj.invoke("getAllEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getAllEquipment, args)

    def getAllEquipmentNames(self, *args):
        return self._obj.invoke("getAllEquipmentNames", _0_equipment.EquipmentInventoryMgr_I._d_getAllEquipmentNames, args)

    def getAllSupportedPTPs(self, *args):
        return self._obj.invoke("getAllSupportedPTPs", _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportedPTPs, args)

    def getAllSupportedPTPNames(self, *args):
        return self._obj.invoke("getAllSupportedPTPNames", _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportedPTPNames, args)

    def getAllSupportingEquipment(self, *args):
        return self._obj.invoke("getAllSupportingEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportingEquipment, args)

    def getAllSupportingEquipmentNames(self, *args):
        return self._obj.invoke("getAllSupportingEquipmentNames", _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportingEquipmentNames, args)

    def getSupportingEquipment(self, *args):
        return self._obj.invoke("getSupportingEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getSupportingEquipment, args)

    def getSupportingEquipmentNames(self, *args):
        return self._obj.invoke("getSupportingEquipmentNames", _0_equipment.EquipmentInventoryMgr_I._d_getSupportingEquipmentNames, args)

    def getSupportedEquipment(self, *args):
        return self._obj.invoke("getSupportedEquipment", _0_equipment.EquipmentInventoryMgr_I._d_getSupportedEquipment, args)

    def getSupportedEquipmentNames(self, *args):
        return self._obj.invoke("getSupportedEquipmentNames", _0_equipment.EquipmentInventoryMgr_I._d_getSupportedEquipmentNames, args)

omniORB.registerObjref(EquipmentInventoryMgr_I._NP_RepositoryId, _objref_EquipmentInventoryMgr_I)
_0_equipment._objref_EquipmentInventoryMgr_I = _objref_EquipmentInventoryMgr_I
del EquipmentInventoryMgr_I, _objref_EquipmentInventoryMgr_I

# EquipmentInventoryMgr_I skeleton
__name__ = "equipment__POA"
class EquipmentInventoryMgr_I (_0_common__POA.Common_I):
    _NP_RepositoryId = _0_equipment.EquipmentInventoryMgr_I._NP_RepositoryId


    _omni_op_d = {"provisionEquipment": _0_equipment.EquipmentInventoryMgr_I._d_provisionEquipment, "unprovisionEquipment": _0_equipment.EquipmentInventoryMgr_I._d_unprovisionEquipment, "setAlarmReportingOn": _0_equipment.EquipmentInventoryMgr_I._d_setAlarmReportingOn, "setAlarmReportingOff": _0_equipment.EquipmentInventoryMgr_I._d_setAlarmReportingOff, "getContainedEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getContainedEquipment, "getEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getEquipment, "getAllEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getAllEquipment, "getAllEquipmentNames": _0_equipment.EquipmentInventoryMgr_I._d_getAllEquipmentNames, "getAllSupportedPTPs": _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportedPTPs, "getAllSupportedPTPNames": _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportedPTPNames, "getAllSupportingEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportingEquipment, "getAllSupportingEquipmentNames": _0_equipment.EquipmentInventoryMgr_I._d_getAllSupportingEquipmentNames, "getSupportingEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getSupportingEquipment, "getSupportingEquipmentNames": _0_equipment.EquipmentInventoryMgr_I._d_getSupportingEquipmentNames, "getSupportedEquipment": _0_equipment.EquipmentInventoryMgr_I._d_getSupportedEquipment, "getSupportedEquipmentNames": _0_equipment.EquipmentInventoryMgr_I._d_getSupportedEquipmentNames}
    _omni_op_d.update(_0_common__POA.Common_I._omni_op_d)

EquipmentInventoryMgr_I._omni_skeleton = EquipmentInventoryMgr_I
_0_equipment__POA.EquipmentInventoryMgr_I = EquipmentInventoryMgr_I
omniORB.registerSkeleton(EquipmentInventoryMgr_I._NP_RepositoryId, EquipmentInventoryMgr_I)
del EquipmentInventoryMgr_I
__name__ = "equipment"

#
# End of module "equipment"
#
__name__ = "equipment_idl"

_exported_modules = ( "equipment", )

# The end.
