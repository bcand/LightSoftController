# Python stubs generated by omniidl from mLSNPP.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "globaldefs.idl"
import globaldefs_idl
_0_globaldefs = omniORB.openModule("globaldefs")
_0_globaldefs__POA = omniORB.openModule("globaldefs__POA")

# #include "common.idl"
import common_idl
_0_common = omniORB.openModule("common")
_0_common__POA = omniORB.openModule("common__POA")

# #include "transmissionParameters.idl"
import transmissionParameters_idl
_0_transmissionParameters = omniORB.openModule("transmissionParameters")
_0_transmissionParameters__POA = omniORB.openModule("transmissionParameters__POA")

# #include "terminationPoint.idl"
import terminationPoint_idl
_0_terminationPoint = omniORB.openModule("terminationPoint")
_0_terminationPoint__POA = omniORB.openModule("terminationPoint__POA")

#
# Start of module "mLSNPP"
#
__name__ = "mLSNPP"
_0_mLSNPP = omniORB.openModule("mLSNPP", r"mLSNPP.idl")
_0_mLSNPP__POA = omniORB.openModule("mLSNPP__POA", r"mLSNPP.idl")


# typedef ... TNAName_T
class TNAName_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.TNAName_T = TNAName_T
_0_mLSNPP._d_TNAName_T  = (omniORB.tcInternal.tv_string,0)
_0_mLSNPP._ad_TNAName_T = (omniORB.tcInternal.tv_alias, TNAName_T._NP_RepositoryId, "TNAName_T", (omniORB.tcInternal.tv_string,0))
_0_mLSNPP._tc_TNAName_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_TNAName_T)
omniORB.registerType(TNAName_T._NP_RepositoryId, _0_mLSNPP._ad_TNAName_T, _0_mLSNPP._tc_TNAName_T)
del TNAName_T

# typedef ... TNAList_T
class TNAList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/TNAList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.TNAList_T = TNAList_T
_0_mLSNPP._d_TNAList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"], 0)
_0_mLSNPP._ad_TNAList_T = (omniORB.tcInternal.tv_alias, TNAList_T._NP_RepositoryId, "TNAList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"], 0))
_0_mLSNPP._tc_TNAList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_TNAList_T)
omniORB.registerType(TNAList_T._NP_RepositoryId, _0_mLSNPP._ad_TNAList_T, _0_mLSNPP._tc_TNAList_T)
del TNAList_T

# struct SNP_T
_0_mLSNPP.SNP_T = omniORB.newEmptyClass()
class SNP_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNP_T:1.0"

    def __init__(self, sNPId, tPName, tNAName):
        self.sNPId = sNPId
        self.tPName = tPName
        self.tNAName = tNAName

_0_mLSNPP.SNP_T = SNP_T
_0_mLSNPP._d_SNP_T  = (omniORB.tcInternal.tv_struct, SNP_T, SNP_T._NP_RepositoryId, "SNP_T", "sNPId", (omniORB.tcInternal.tv_string,0), "tPName", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "tNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"])
_0_mLSNPP._tc_SNP_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_SNP_T)
omniORB.registerType(SNP_T._NP_RepositoryId, _0_mLSNPP._d_SNP_T, _0_mLSNPP._tc_SNP_T)
del SNP_T

# typedef ... SNPList_T
class SNPList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.SNPList_T = SNPList_T
_0_mLSNPP._d_SNPList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNP_T:1.0"], 0)
_0_mLSNPP._ad_SNPList_T = (omniORB.tcInternal.tv_alias, SNPList_T._NP_RepositoryId, "SNPList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNP_T:1.0"], 0))
_0_mLSNPP._tc_SNPList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_SNPList_T)
omniORB.registerType(SNPList_T._NP_RepositoryId, _0_mLSNPP._ad_SNPList_T, _0_mLSNPP._tc_SNPList_T)
del SNPList_T

# struct SNPP_T
_0_mLSNPP.SNPP_T = omniORB.newEmptyClass()
class SNPP_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPP_T:1.0"

    def __init__(self, sNPPId, sNPList, tNAName, groupTNAName, rAId):
        self.sNPPId = sNPPId
        self.sNPList = sNPList
        self.tNAName = tNAName
        self.groupTNAName = groupTNAName
        self.rAId = rAId

_0_mLSNPP.SNPP_T = SNPP_T
_0_mLSNPP._d_SNPP_T  = (omniORB.tcInternal.tv_struct, SNPP_T, SNPP_T._NP_RepositoryId, "SNPP_T", "sNPPId", (omniORB.tcInternal.tv_string,0), "sNPList", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPList_T:1.0"], "tNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"], "groupTNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"], "rAId", (omniORB.tcInternal.tv_string,0))
_0_mLSNPP._tc_SNPP_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_SNPP_T)
omniORB.registerType(SNPP_T._NP_RepositoryId, _0_mLSNPP._d_SNPP_T, _0_mLSNPP._tc_SNPP_T)
del SNPP_T

# typedef ... SNPPList_T
class SNPPList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPPList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.SNPPList_T = SNPPList_T
_0_mLSNPP._d_SNPPList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPP_T:1.0"], 0)
_0_mLSNPP._ad_SNPPList_T = (omniORB.tcInternal.tv_alias, SNPPList_T._NP_RepositoryId, "SNPPList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPP_T:1.0"], 0))
_0_mLSNPP._tc_SNPPList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_SNPPList_T)
omniORB.registerType(SNPPList_T._NP_RepositoryId, _0_mLSNPP._ad_SNPPList_T, _0_mLSNPP._tc_SNPPList_T)
del SNPPList_T

# struct LayeredSNPP_T
_0_mLSNPP.LayeredSNPP_T = omniORB.newEmptyClass()
class LayeredSNPP_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/LayeredSNPP_T:1.0"

    def __init__(self, layerRate, SNPPList):
        self.layerRate = layerRate
        self.SNPPList = SNPPList

_0_mLSNPP.LayeredSNPP_T = LayeredSNPP_T
_0_mLSNPP._d_LayeredSNPP_T  = (omniORB.tcInternal.tv_struct, LayeredSNPP_T, LayeredSNPP_T._NP_RepositoryId, "LayeredSNPP_T", "layerRate", omniORB.typeMapping["IDL:mtnm.tmforum.org/transmissionParameters/LayerRate_T:1.0"], "SNPPList", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPPList_T:1.0"])
_0_mLSNPP._tc_LayeredSNPP_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_LayeredSNPP_T)
omniORB.registerType(LayeredSNPP_T._NP_RepositoryId, _0_mLSNPP._d_LayeredSNPP_T, _0_mLSNPP._tc_LayeredSNPP_T)
del LayeredSNPP_T

# typedef ... LayeredSNPPList_T
class LayeredSNPPList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/LayeredSNPPList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.LayeredSNPPList_T = LayeredSNPPList_T
_0_mLSNPP._d_LayeredSNPPList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/LayeredSNPP_T:1.0"], 0)
_0_mLSNPP._ad_LayeredSNPPList_T = (omniORB.tcInternal.tv_alias, LayeredSNPPList_T._NP_RepositoryId, "LayeredSNPPList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/LayeredSNPP_T:1.0"], 0))
_0_mLSNPP._tc_LayeredSNPPList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_LayeredSNPPList_T)
omniORB.registerType(LayeredSNPPList_T._NP_RepositoryId, _0_mLSNPP._ad_LayeredSNPPList_T, _0_mLSNPP._tc_LayeredSNPPList_T)
del LayeredSNPPList_T

# struct MultiLayerSNPP_T
_0_mLSNPP.MultiLayerSNPP_T = omniORB.newEmptyClass()
class MultiLayerSNPP_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/MultiLayerSNPP_T:1.0"

    def __init__(self, name, userLabel, nativeEMSName, owner, direction, layeredSNPPList, additionalInfo):
        self.name = name
        self.userLabel = userLabel
        self.nativeEMSName = nativeEMSName
        self.owner = owner
        self.direction = direction
        self.layeredSNPPList = layeredSNPPList
        self.additionalInfo = additionalInfo

_0_mLSNPP.MultiLayerSNPP_T = MultiLayerSNPP_T
_0_mLSNPP._d_MultiLayerSNPP_T  = (omniORB.tcInternal.tv_struct, MultiLayerSNPP_T, MultiLayerSNPP_T._NP_RepositoryId, "MultiLayerSNPP_T", "name", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], "userLabel", (omniORB.tcInternal.tv_string,0), "nativeEMSName", (omniORB.tcInternal.tv_string,0), "owner", (omniORB.tcInternal.tv_string,0), "direction", omniORB.typeMapping["IDL:mtnm.tmforum.org/terminationPoint/Directionality_T:1.0"], "layeredSNPPList", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/LayeredSNPPList_T:1.0"], "additionalInfo", omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NVSList_T:1.0"])
_0_mLSNPP._tc_MultiLayerSNPP_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_MultiLayerSNPP_T)
omniORB.registerType(MultiLayerSNPP_T._NP_RepositoryId, _0_mLSNPP._d_MultiLayerSNPP_T, _0_mLSNPP._tc_MultiLayerSNPP_T)
del MultiLayerSNPP_T

# typedef ... MLSNPPList_T
class MLSNPPList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/MLSNPPList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.MLSNPPList_T = MLSNPPList_T
_0_mLSNPP._d_MLSNPPList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MultiLayerSNPP_T:1.0"], 0)
_0_mLSNPP._ad_MLSNPPList_T = (omniORB.tcInternal.tv_alias, MLSNPPList_T._NP_RepositoryId, "MLSNPPList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MultiLayerSNPP_T:1.0"], 0))
_0_mLSNPP._tc_MLSNPPList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_MLSNPPList_T)
omniORB.registerType(MLSNPPList_T._NP_RepositoryId, _0_mLSNPP._ad_MLSNPPList_T, _0_mLSNPP._tc_MLSNPPList_T)
del MLSNPPList_T

# struct SNPTNAPair_T
_0_mLSNPP.SNPTNAPair_T = omniORB.newEmptyClass()
class SNPTNAPair_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPTNAPair_T:1.0"

    def __init__(self, SNPId, tNAName):
        self.SNPId = SNPId
        self.tNAName = tNAName

_0_mLSNPP.SNPTNAPair_T = SNPTNAPair_T
_0_mLSNPP._d_SNPTNAPair_T  = (omniORB.tcInternal.tv_struct, SNPTNAPair_T, SNPTNAPair_T._NP_RepositoryId, "SNPTNAPair_T", "SNPId", (omniORB.tcInternal.tv_string,0), "tNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"])
_0_mLSNPP._tc_SNPTNAPair_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_SNPTNAPair_T)
omniORB.registerType(SNPTNAPair_T._NP_RepositoryId, _0_mLSNPP._d_SNPTNAPair_T, _0_mLSNPP._tc_SNPTNAPair_T)
del SNPTNAPair_T

# typedef ... SNPTNAPairList_T
class SNPTNAPairList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPTNAPairList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.SNPTNAPairList_T = SNPTNAPairList_T
_0_mLSNPP._d_SNPTNAPairList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNAPair_T:1.0"], 0)
_0_mLSNPP._ad_SNPTNAPairList_T = (omniORB.tcInternal.tv_alias, SNPTNAPairList_T._NP_RepositoryId, "SNPTNAPairList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNAPair_T:1.0"], 0))
_0_mLSNPP._tc_SNPTNAPairList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_SNPTNAPairList_T)
omniORB.registerType(SNPTNAPairList_T._NP_RepositoryId, _0_mLSNPP._ad_SNPTNAPairList_T, _0_mLSNPP._tc_SNPTNAPairList_T)
del SNPTNAPairList_T

# struct SNPTNAData_T
_0_mLSNPP.SNPTNAData_T = omniORB.newEmptyClass()
class SNPTNAData_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPTNAData_T:1.0"

    def __init__(self, sNPPId, layerRate, rAId, sNPTNAPairList):
        self.sNPPId = sNPPId
        self.layerRate = layerRate
        self.rAId = rAId
        self.sNPTNAPairList = sNPTNAPairList

_0_mLSNPP.SNPTNAData_T = SNPTNAData_T
_0_mLSNPP._d_SNPTNAData_T  = (omniORB.tcInternal.tv_struct, SNPTNAData_T, SNPTNAData_T._NP_RepositoryId, "SNPTNAData_T", "sNPPId", (omniORB.tcInternal.tv_string,0), "layerRate", omniORB.typeMapping["IDL:mtnm.tmforum.org/transmissionParameters/LayerRate_T:1.0"], "rAId", (omniORB.tcInternal.tv_string,0), "sNPTNAPairList", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNAPairList_T:1.0"])
_0_mLSNPP._tc_SNPTNAData_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_SNPTNAData_T)
omniORB.registerType(SNPTNAData_T._NP_RepositoryId, _0_mLSNPP._d_SNPTNAData_T, _0_mLSNPP._tc_SNPTNAData_T)
del SNPTNAData_T

# typedef ... SNPTNADataList_T
class SNPTNADataList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPTNADataList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.SNPTNADataList_T = SNPTNADataList_T
_0_mLSNPP._d_SNPTNADataList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNAData_T:1.0"], 0)
_0_mLSNPP._ad_SNPTNADataList_T = (omniORB.tcInternal.tv_alias, SNPTNADataList_T._NP_RepositoryId, "SNPTNADataList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNAData_T:1.0"], 0))
_0_mLSNPP._tc_SNPTNADataList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_SNPTNADataList_T)
omniORB.registerType(SNPTNADataList_T._NP_RepositoryId, _0_mLSNPP._ad_SNPTNADataList_T, _0_mLSNPP._tc_SNPTNADataList_T)
del SNPTNADataList_T

# struct SNPPTNAPair_T
_0_mLSNPP.SNPPTNAPair_T = omniORB.newEmptyClass()
class SNPPTNAPair_T (omniORB.StructBase):
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPPTNAPair_T:1.0"

    def __init__(self, sNPPId, layerRate, rAId, tNAName, groupTNAName):
        self.sNPPId = sNPPId
        self.layerRate = layerRate
        self.rAId = rAId
        self.tNAName = tNAName
        self.groupTNAName = groupTNAName

_0_mLSNPP.SNPPTNAPair_T = SNPPTNAPair_T
_0_mLSNPP._d_SNPPTNAPair_T  = (omniORB.tcInternal.tv_struct, SNPPTNAPair_T, SNPPTNAPair_T._NP_RepositoryId, "SNPPTNAPair_T", "sNPPId", (omniORB.tcInternal.tv_string,0), "layerRate", omniORB.typeMapping["IDL:mtnm.tmforum.org/transmissionParameters/LayerRate_T:1.0"], "rAId", (omniORB.tcInternal.tv_string,0), "tNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"], "groupTNAName", omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/TNAName_T:1.0"])
_0_mLSNPP._tc_SNPPTNAPair_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_SNPPTNAPair_T)
omniORB.registerType(SNPPTNAPair_T._NP_RepositoryId, _0_mLSNPP._d_SNPPTNAPair_T, _0_mLSNPP._tc_SNPPTNAPair_T)
del SNPPTNAPair_T

# typedef ... SNPPTNAPairList_T
class SNPPTNAPairList_T:
    _NP_RepositoryId = "IDL:mtnm.tmforum.org/mLSNPP/SNPPTNAPairList_T:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_mLSNPP.SNPPTNAPairList_T = SNPPTNAPairList_T
_0_mLSNPP._d_SNPPTNAPairList_T  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPPTNAPair_T:1.0"], 0)
_0_mLSNPP._ad_SNPPTNAPairList_T = (omniORB.tcInternal.tv_alias, SNPPTNAPairList_T._NP_RepositoryId, "SNPPTNAPairList_T", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPPTNAPair_T:1.0"], 0))
_0_mLSNPP._tc_SNPPTNAPairList_T = omniORB.tcInternal.createTypeCode(_0_mLSNPP._ad_SNPPTNAPairList_T)
omniORB.registerType(SNPPTNAPairList_T._NP_RepositoryId, _0_mLSNPP._ad_SNPPTNAPairList_T, _0_mLSNPP._tc_SNPPTNAPairList_T)
del SNPPTNAPairList_T

# interface MLSNPPIterator_I
_0_mLSNPP._d_MLSNPPIterator_I = (omniORB.tcInternal.tv_objref, "IDL:mtnm.tmforum.org/mLSNPP/MLSNPPIterator_I:1.0", "MLSNPPIterator_I")
omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MLSNPPIterator_I:1.0"] = _0_mLSNPP._d_MLSNPPIterator_I
_0_mLSNPP.MLSNPPIterator_I = omniORB.newEmptyClass()
class MLSNPPIterator_I :
    _NP_RepositoryId = _0_mLSNPP._d_MLSNPPIterator_I[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_mLSNPP.MLSNPPIterator_I = MLSNPPIterator_I
_0_mLSNPP._tc_MLSNPPIterator_I = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_MLSNPPIterator_I)
omniORB.registerType(MLSNPPIterator_I._NP_RepositoryId, _0_mLSNPP._d_MLSNPPIterator_I, _0_mLSNPP._tc_MLSNPPIterator_I)

# MLSNPPIterator_I operations and attributes
MLSNPPIterator_I._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MLSNPPList_T:1.0"]), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
MLSNPPIterator_I._d_getLength = ((), (omniORB.tcInternal.tv_ulong, ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
MLSNPPIterator_I._d_destroy = ((), (), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})

# MLSNPPIterator_I object reference
class _objref_MLSNPPIterator_I (CORBA.Object):
    _NP_RepositoryId = MLSNPPIterator_I._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def next_n(self, *args):
        return self._obj.invoke("next_n", _0_mLSNPP.MLSNPPIterator_I._d_next_n, args)

    def getLength(self, *args):
        return self._obj.invoke("getLength", _0_mLSNPP.MLSNPPIterator_I._d_getLength, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_mLSNPP.MLSNPPIterator_I._d_destroy, args)

omniORB.registerObjref(MLSNPPIterator_I._NP_RepositoryId, _objref_MLSNPPIterator_I)
_0_mLSNPP._objref_MLSNPPIterator_I = _objref_MLSNPPIterator_I
del MLSNPPIterator_I, _objref_MLSNPPIterator_I

# MLSNPPIterator_I skeleton
__name__ = "mLSNPP__POA"
class MLSNPPIterator_I (PortableServer.Servant):
    _NP_RepositoryId = _0_mLSNPP.MLSNPPIterator_I._NP_RepositoryId


    _omni_op_d = {"next_n": _0_mLSNPP.MLSNPPIterator_I._d_next_n, "getLength": _0_mLSNPP.MLSNPPIterator_I._d_getLength, "destroy": _0_mLSNPP.MLSNPPIterator_I._d_destroy}

MLSNPPIterator_I._omni_skeleton = MLSNPPIterator_I
_0_mLSNPP__POA.MLSNPPIterator_I = MLSNPPIterator_I
omniORB.registerSkeleton(MLSNPPIterator_I._NP_RepositoryId, MLSNPPIterator_I)
del MLSNPPIterator_I
__name__ = "mLSNPP"

# interface MLSNPPMgr_I
_0_mLSNPP._d_MLSNPPMgr_I = (omniORB.tcInternal.tv_objref, "IDL:mtnm.tmforum.org/mLSNPP/MLSNPPMgr_I:1.0", "MLSNPPMgr_I")
omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MLSNPPMgr_I:1.0"] = _0_mLSNPP._d_MLSNPPMgr_I
_0_mLSNPP.MLSNPPMgr_I = omniORB.newEmptyClass()
class MLSNPPMgr_I (_0_common.Common_I):
    _NP_RepositoryId = _0_mLSNPP._d_MLSNPPMgr_I[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_mLSNPP.MLSNPPMgr_I = MLSNPPMgr_I
_0_mLSNPP._tc_MLSNPPMgr_I = omniORB.tcInternal.createTypeCode(_0_mLSNPP._d_MLSNPPMgr_I)
omniORB.registerType(MLSNPPMgr_I._NP_RepositoryId, _0_mLSNPP._d_MLSNPPMgr_I, _0_mLSNPP._tc_MLSNPPMgr_I)

# MLSNPPMgr_I operations and attributes
MLSNPPMgr_I._d_getMLSNPP = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], ), (omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MultiLayerSNPP_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})
MLSNPPMgr_I._d_setTNANameForMLSNPP = ((omniORB.typeMapping["IDL:mtnm.tmforum.org/globaldefs/NamingAttributes_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPTNADataList_T:1.0"], omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/SNPPTNAPairList_T:1.0"], (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:mtnm.tmforum.org/mLSNPP/MultiLayerSNPP_T:1.0"], ), {_0_globaldefs.ProcessingFailureException._NP_RepositoryId: _0_globaldefs._d_ProcessingFailureException})

# MLSNPPMgr_I object reference
class _objref_MLSNPPMgr_I (_0_common._objref_Common_I):
    _NP_RepositoryId = MLSNPPMgr_I._NP_RepositoryId

    def __init__(self, obj):
        _0_common._objref_Common_I.__init__(self, obj)

    def getMLSNPP(self, *args):
        return self._obj.invoke("getMLSNPP", _0_mLSNPP.MLSNPPMgr_I._d_getMLSNPP, args)

    def setTNANameForMLSNPP(self, *args):
        return self._obj.invoke("setTNANameForMLSNPP", _0_mLSNPP.MLSNPPMgr_I._d_setTNANameForMLSNPP, args)

omniORB.registerObjref(MLSNPPMgr_I._NP_RepositoryId, _objref_MLSNPPMgr_I)
_0_mLSNPP._objref_MLSNPPMgr_I = _objref_MLSNPPMgr_I
del MLSNPPMgr_I, _objref_MLSNPPMgr_I

# MLSNPPMgr_I skeleton
__name__ = "mLSNPP__POA"
class MLSNPPMgr_I (_0_common__POA.Common_I):
    _NP_RepositoryId = _0_mLSNPP.MLSNPPMgr_I._NP_RepositoryId


    _omni_op_d = {"getMLSNPP": _0_mLSNPP.MLSNPPMgr_I._d_getMLSNPP, "setTNANameForMLSNPP": _0_mLSNPP.MLSNPPMgr_I._d_setTNANameForMLSNPP}
    _omni_op_d.update(_0_common__POA.Common_I._omni_op_d)

MLSNPPMgr_I._omni_skeleton = MLSNPPMgr_I
_0_mLSNPP__POA.MLSNPPMgr_I = MLSNPPMgr_I
omniORB.registerSkeleton(MLSNPPMgr_I._NP_RepositoryId, MLSNPPMgr_I)
del MLSNPPMgr_I
__name__ = "mLSNPP"

#
# End of module "mLSNPP"
#
__name__ = "mLSNPP_idl"

_exported_modules = ( "mLSNPP", )

# The end.
